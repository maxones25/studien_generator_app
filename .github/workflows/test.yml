name: "[App] Release"

on:
  push:
    branches:
      - main

env:
  TEST: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      pipeline: ${{ steps.filter.outputs.pipeline }}
      database: ${{ steps.filter.outputs.database }}
      cypress: ${{ steps.filter.outputs.cypress }}
      test_setup: ${{ steps.filter.outputs.test_setup }}
      admin_backend: ${{ steps.filter.outputs.admin_backend }}
      admin_backend_tests: ${{ steps.filter.outputs.admin_backend_tests }}
      admin_frontend: ${{ steps.filter.outputs.admin_frontend }}
      study_backend: ${{ steps.filter.outputs.study_backend }}
      study_backend_tests: ${{ steps.filter.outputs.study_backend_tests }}
      study_frontend: ${{ steps.filter.outputs.study_frontend }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pipeline:
              - '.github/workflows/**'
            cypress:
              - 'tests/cypress/**'
            database:
              - 'backend/migrations/**'
              - 'mysql/schema.sql'
              - 'mysql/test.dockerfile'
              - 'mysql/schema/**'
              - 'mysql/seed/**'
            test_setup:
              - 'backend/migrations/**'
            admin_backend:
              - 'backend/apps/admin/src/**'
              - 'backend/migrations/**'
              - 'backend/libs/entities/**'
              - 'backend/libs/shared/**'
            admin_backend_tests:
              - 'backend/apps/admin/test/**'
              - 'backend/libs/test/**'
            admin_frontend:
              - 'frontend/admin-app/**'
            admin_frontend_tests:
              - 'tests/cypress/e2e/admin-app/**'
            study_backend:
              - 'backend/apps/study/src/**'
              - 'backend/migrations/**'
              - 'backend/libs/entities/**'
              - 'backend/libs/shared/**'
            study_backend_tests:
              - 'backend/apps/study/test/**'
              - 'backend/libs/test/**'
            study_frontend:
              - 'frontend/study-app/**'
            study_frontend_tests:
              - 'tests/cypress/e2e/study-app/**'

  build-database-container:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.database == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.database == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push admin-frontend container
        if: needs.changes.outputs.database == 'true'
        run: |
          docker build ./mysql -t ghcr.io/${{ github.repository }}/test-database:latest -f ./mysql/test.dockerfile
          docker push ghcr.io/${{ github.repository }}/test-database:latest

  build-test-setup:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.test_setup == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.test_setup == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push admin-frontend container
        if: needs.changes.outputs.test_setup == 'true'
        run: |
          docker build ./backend -t ghcr.io/${{ github.repository }}/test-setup:latest -f ./backend/test-setup.dockerfile
          docker push ghcr.io/${{ github.repository }}/test-setup:latest

  build-cypress:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.cypress == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.cypress == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push admin-frontend container
        if: needs.changes.outputs.cypress == 'true'
        run: |
          docker build ./tests/cypress -t ghcr.io/${{ github.repository }}/cypress-tests:latest -f ./tests/cypress/dockerfile
          docker push ghcr.io/${{ github.repository }}/cypress-tests:latest

  build-admin-frontend-container:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.admin_frontend == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.admin_frontend == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push admin-frontend container
        if: needs.changes.outputs.admin_frontend == 'true'
        run: |
          docker build ./frontend/admin-app -t ghcr.io/${{ github.repository }}/admin-frontend:latest -f ./frontend/admin-app/dockerfile
          docker push ghcr.io/${{ github.repository }}/admin-frontend:latest

  build-admin-backend-container:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.admin_backend == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.admin_backend == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push admin-frontend container
        if: needs.changes.outputs.admin_backend == 'true'
        run: |
          docker build ./backend -t ghcr.io/${{ github.repository }}/admin-backend:latest -f ./backend/admin.dockerfile
          docker push ghcr.io/${{ github.repository }}/admin-backend:latest

  build-study-frontend-container:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.study_frontend == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.study_frontend == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push study-frontend container
        if: needs.changes.outputs.study_frontend == 'true'
        run: |
          docker build ./frontend/study-app -t ghcr.io/${{ github.repository }}/study-frontend:latest -f ./frontend/study-app/dockerfile
          docker push ghcr.io/${{ github.repository }}/study-frontend:latest

  build-study-backend-container:
    runs-on: ubuntu-latest
    needs: changes
    steps:
      - name: Get latest code
        if: needs.changes.outputs.study_backend == 'true'
        uses: actions/checkout@v2

      - name: Log into GitHub Container Registry
        if: needs.changes.outputs.study_backend == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push admin-frontend container
        if: needs.changes.outputs.study_backend == 'true'
        run: |
          docker build ./backend -t ghcr.io/${{ github.repository }}/study-backend:latest -f ./backend/study.dockerfile
          docker push ghcr.io/${{ github.repository }}/study-backend:latest

  studies-management-api-tests:
    name: Test studies management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run studies tests
        working-directory: ./backend
        run: npm run test:admin studies

  director-management-api-tests:
    name: Test directors management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run directors tests
        working-directory: ./backend
        run: npm run test:admin directors

  entities-management-api-tests:
    name: Test entities management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run entities tests
        working-directory: ./backend
        run: npm run test:admin entities

  forms-management-api-tests:
    name: Test forms management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run forms tests
        working-directory: ./backend
        run: npm run test:admin forms

  groups-management-api-tests:
    name: Test groups management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run groups tests
        working-directory: ./backend
        run: npm run test:admin groups

  participants-management-api-tests:
    name: Test participants management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run participants tests
        working-directory: ./backend
        run: npm run test:admin participants

  records-management-api-tests:
    name: Test records management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run records tests
        working-directory: ./backend
        run: npm run test:admin records

  chats-management-api-tests:
    name: Test chats management API
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run chats tests
        working-directory: ./backend
        run: npm run test:admin chats

  study-backend-tests:
    runs-on: ubuntu-latest
    needs: [changes, build-database-container, build-study-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.study_backend == 'true' ||
      needs.changes.outputs.study_backend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: |
          docker-compose -f database-docker-compose.yaml build
          docker-compose -f database-docker-compose.yaml up -d

      - name: Wait for MySQL
        run: sleep 10s

      - name: Run schema migrations
        working-directory: ./backend
        run: npm run db:migration:run

      - name: Insert testing seed data
        working-directory: ./backend
        run: npm run db:seed:run

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:study:integration

  studies-management-e2e-tests:
    name: Test studies management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/studies/**/*"

  directors-management-e2e-tests:
    name: Test directors management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/directors/**/*"

  entities-management-e2e-tests:
    name: Test entities management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/entities/**/*"

  forms-management-e2e-tests:
    name: Test forms management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/forms/**/*"

  groups-management-e2e-tests:
    name: Test groups management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/groups/**/*"

  participants-management-e2e-tests:
    name: Test participants management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/participants/**/*"

  records-management-e2e-tests:
    name: Test records management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/records/**/*"

  chats-management-e2e-tests:
    name: Test chats management E2E
    runs-on: ubuntu-latest
    needs:
      [changes, build-admin-frontend-container, build-admin-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true' ||
      needs.changes.outputs.admin_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Start admin app containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin -- --spec "e2e/admin-app/chats/**/*"

  study-frontend-tests:
    runs-on: ubuntu-latest
    needs:
      [changes, build-study-frontend-container, build-study-backend-container]
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.study_backend == 'true' ||
      needs.changes.outputs.study_frontend == 'true' ||
      needs.changes.outputs.study_frontend_tests == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Build study-backend containers
        run: |
          docker-compose -f study-docker-compose.yaml build

      - name: Start study-backend containers
        run: |
          docker-compose -f study-docker-compose.yaml up -d

      - name: Wait for 30 seconds
        run: sleep 30

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:study
