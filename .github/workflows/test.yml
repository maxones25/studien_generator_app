name: "[App] Release"

on:
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      pipeline: ${{ steps.filter.outputs.pipeline }}
      admin_backend: ${{ steps.filter.outputs.admin_backend }}
      admin_frontend: ${{ steps.filter.outputs.admin_frontend }}
      study_backend: ${{ steps.filter.outputs.study_backend }}
      study_frontend: ${{ steps.filter.outputs.study_frontend }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pipeline:
              - '.github/workflows/**'
            admin_backend:
              - 'backend/apps/admin/**'
              - 'backend/libs/**'
              - 'database-docker-compose.yaml'
            admin_frontend:
              - 'frontend/admin-app/**'
              - 'tests/cypress/e2e/admin-app/**'
            study_backend:
              - 'backend/apps/study/**'
              - 'backend/libs/**'
              - 'database-docker-compose.yaml'
            study_frontend:
              - 'frontend/study-app/**'
              - 'tests/cypress/e2e/study-app/**'
              - 'study-docker-compose.yaml'

  admin-backend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.admin_backend == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: |
          docker-compose -f database-docker-compose.yaml build
          docker-compose -f database-docker-compose.yaml up -d

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:admin:integration

  study-backend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.study_backend == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: |
          docker-compose -f database-docker-compose.yaml build
          docker-compose -f database-docker-compose.yaml up -d

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:study:integration

  admin-frontend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./tests/cypress/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./tests/cypress/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Build admin-backend containers
        run: |
          docker-compose -f admin-docker-compose.yaml build

      - name: Start admin-backend containers
        run: |
          docker-compose -f admin-docker-compose.yaml up -d

      - name: Wait for 30 seconds
        run: sleep 30

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin

  study-frontend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: |
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.study_backend == 'true' ||
      needs.changes.outputs.study_frontend == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./tests/cypress/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./tests/cypress/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        if: steps.cache.outputs.cache-hit != 'true'
        working-directory: ./tests/cypress
        run: npm ci

      - name: Build study-backend containers
        run: |
          docker-compose -f study-docker-compose.yaml build

      - name: Start study-backend containers
        run: |
          docker-compose -f study-docker-compose.yaml up -d

      - name: Wait for 30 seconds
        run: sleep 30

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:study
