name: "[App] Release"

on:
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      pipeline: ${{ steps.filter.outputs.pipeline }}
      admin_backend: ${{ steps.filter.outputs.admin_backend }}
      admin_frontend: ${{ steps.filter.outputs.admin_frontend }}
      study: ${{ steps.filter.outputs.study }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pipeline:
              - '.github/workflows/**'
            admin_backend:
              - 'backend/apps/admin/**'
              - 'backend/libs/**'
            admin_frontend:
              - 'frontend/admin-app/**'
            study:
              - 'backend/apps/study/**'
              - 'backend/libs/**'
              - 'frontend/study-app/**'

  admin-backend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.admin_backend == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: |
          docker-compose -f database-docker-compose.yaml build
          docker-compose -f database-docker-compose.yaml up -d

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:admin:integration

  study-backend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.study == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./backend/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        working-directory: ./backend
        run: npm ci

      - name: Start database containers
        run: |
          docker-compose -f database-docker-compose.yaml build
          docker-compose -f database-docker-compose.yaml up -d

      - name: Run integration tests
        working-directory: ./backend
        run: npm run test:study:integration

  admin-frontend-tests:
    runs-on: ubuntu-latest
    needs: changes
    if: | 
      needs.changes.outputs.pipeline == 'true' ||
      needs.changes.outputs.admin_backend == 'true' ||
      needs.changes.outputs.admin_frontend == 'true'
    steps:
      - name: Get latest code
        uses: actions/checkout@v2

      - name: Cache npm dependencies
        uses: actions/cache@v2
        with:
          path: ./tests/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('./tests/cypress/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install packages
        working-directory: ./tests/cypress
        run: npm ci

      - name: Load cached Docker image
        uses: actions/download-artifact@v2
        with:
          name: admin-backend
          path: .
        continue-on-error: true

      - name: Load Docker image from cache
        run: docker load < admin-backend.tar || true

      - name: Build and cache Docker image
        run: |
          docker-compose -f admin-docker-compose.yaml build admin-backend
          docker save admin-backend:latest > admin-backend.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: admin-backend
          path: admin-backend.tar

      - name: Start admin-backend container
        run: |
          docker-compose -f admin-docker-compose.yaml up -d admin-backend

      - name: Run end to end tests
        working-directory: ./tests/cypress
        run: npm run test:admin
